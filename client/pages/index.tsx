import styles from "../styles/Home.module.css";
import Head from "next/head";
import axios from "axios";
import cookies from "js-cookie";
import { jwtDecode } from "jwt-decode";
import { useRouter } from "next/router";
import React, { useEffect, useState } from "react";
import { UserType } from "../types/user.type";
import { AnswerType } from "../types/answer.type";
import { QuestionType } from "../types/question.type";
import { Header } from "../components/organisms/Header/Header";
import { Statistics } from "../components/molecules/Statistics/Statistics";
import { QuestionWrapper } from "../components/organisms/QuestionWrapper/QuestionWrapper";

const App = () => {
  const router = useRouter();

  const [questions, setQuestions] = useState<QuestionType[] | null>(null);
  const [answers, setAnswers] = useState<AnswerType[] | null>(null);
  const [users, setUsers] = useState<UserType[] | null>(null);
  const [loggedUser, setLoggedUser] = useState<UserType | null>(null);
  const [isJwtActive, setJwtActive] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");

  const fetchLoggedInUser = async (userId: string) => {
    console.log("fetchLoggedInUser");

    try {
      // const headers = {
      //   authorization: cookies.get("jwt_token"),
      // };

      const res = await axios.get(
        `${process.env.SERVER_URL}/user/${userId}`
        // {headers,}
      );

      setLoggedUser(res.data);
    } catch (err) {
      console.error("Error fetching logged-in user:", err);

      // @ts-expect-error
      if (err.response?.status === 401) {
        router.push("/login");
      }
    }
  };

  const fetchVerifyToken = async () => {
    console.log("fetchVerifyToken");

    try {
      const headers = {
        authorization: cookies.get("jwt_token"),
      };

      const res = await axios.get(`${process.env.SERVER_URL}/verify_token`, {
        headers,
      });

      setJwtActive(true);
    } catch (err) {
      console.error("Error fetching logged-in user:", err);

      // @ts-expect-error
      if (err.response?.status === 401) {
        setJwtActive(false);
      }
    }
  };

  const fetchQuestions = async () => {
    console.log("fetchQuestions");
    try {
      // const headers = {
      //   authorization: cookies.get("jwt_token"),
      // };

      const res = await axios.get(
        `${process.env.SERVER_URL}/questions`
        // {headers,}
      );

      setQuestions(res.data.sortedQuestions);
      fetchVerifyToken();
    } catch (err) {
      console.error("Error fetching questions:", err);
      // @ts-expect-error
      if (err.response.status === 401) {
        router.push("/login");
      }
    }
  };

  const fetchAnswers = async () => {
    console.log("fetchAnswers");

    try {
      // const headers = {
      //   authorization: cookies.get("jwt_token"),
      // };

      const res = await axios.get(
        `${process.env.SERVER_URL}/answers`
        // {headers,}
      );

      setAnswers(res.data.sortedAnswers);
    } catch (err) {
      console.error("Error fetching answers:", err);
      // @ts-expect-error
      if (err.response.status === 401) {
        router.push("/login");
      }
    }
  };

  const fetchUsers = async () => {
    console.log("fetchUsers");

    try {
      // const headers = {
      //   authorization: cookies.get("jwt_token"),
      // };

      const res = await axios.get(
        `${process.env.SERVER_URL}/users`
        // {headers,}
      );

      setUsers(res.data.users);
    } catch (err) {
      console.error("Error fetching users:", err);
    }
  };

  useEffect(() => {
    const token = cookies.get("jwt_token");
    if (token) {
      const decodedToken: { userId: string } = jwtDecode(token);
      fetchLoggedInUser(decodedToken.userId);
    } else {
      // router.push("/login");
      console.log("User not unauthenticated, please login");
    }

    fetchQuestions();
    fetchAnswers();
    fetchUsers();
  }, []);

  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(event.target.value);
  };

  const filteredQuestions = questions?.filter(
    (question) =>
      question.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      question.text.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const filteredAnswers = answers?.filter((answer) =>
    answer.text.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const filteredUsers = users?.filter((user) =>
    user.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // console.log(filteredQuestions, filteredAnswers, filteredUsers);

  return (
    <>
      <Head>
        <title>Q-station Community</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/Q_favicon.ico" />
      </Head>

      <Header
        loggedUser={loggedUser}
        isJwtActive={isJwtActive}
        onSearchChange={handleSearchChange}
      />

      <Statistics
        questionCount={questions ? questions.length : 0}
        answerCount={answers ? answers.length : 0}
        userCount={users ? users.length : 0}
      />

      <QuestionWrapper
        questions={questions}
        answers={answers}
        users={users}
        fetchQuestions={fetchQuestions}
        isJwtActive={isJwtActive}
      />

      <footer className={styles.footer}>
        <p>Â©2024 Q-station. All rights reserved.</p>
      </footer>
    </>
  );
};

export default App;
